//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "..\cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "VanillaLib";
};


// registrations start here


namespace
{
XLRegistration::Arg
YC_YearFractionArgs[]=
{
{ "y1","too lazy to comment this one ","B"},
{ "m1","too lazy to comment this one ","B"},
{ "d1"," start date (YYYY,MM,DD) ","B"},
{ "y2","too lazy to comment this one ","B"},
{ "m2","too lazy to comment this one ","B"},
{ "d2"," end date   (YYYY,MM,DD) ","B"},
{ "dc"," Allowed: ACT/360, ACT/365F, 30/360US ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerYC_YearFraction("xlYC_YearFraction",
"YC_YearFraction",
" Year fraction between two dates under a day-count ",
LibraryName,
YC_YearFractionArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlYC_YearFraction(
double y1a,
double m1a,
double d1a,
double y2a,
double m2a,
double d2a,
LPXLFOPER dca)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int y1(
	static_cast<int>(y1a));

int m1(
	static_cast<int>(m1a));

int d1(
	static_cast<int>(d1a));

int y2(
	static_cast<int>(y2a));

int m2(
	static_cast<int>(m2a));

int d2(
	static_cast<int>(d2a));

XlfOper dcb(
	(dca));
std::string dc(
	dcb.AsString("dc"));

double result(
	YC_YearFraction(
		y1,
		m1,
		d1,
		y2,
		m2,
		d2,
		dc)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

